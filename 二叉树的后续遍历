//递归算法
function postorder(node){
    if (node) {
        postorder(node.children[0]);
        postorder(node.children[1]);
        show(node);
    }
}
//非递归算法，利用双栈，因为后续遍历的顺序是(左子树->右子树->根),所以我们需要在最后结果中的s2从栈顶往下是这个顺序(然后做出栈操作就行)。
//先将根节点入s1栈，然后s1栈顶元素弹出到s2中(入栈) 同时 将栈顶元素的左右子树入栈。

function postorderNonRecur(node) {
    if (node) {
        var s1 = [];
        var s2 = [];
        s1.push(node);
        while (s1.length !== 0) {
            node = s1.pop();
            s2.push(node);
            if (node.children[0]) {
                s1.push(node.children[0]);
            }
            if (node.children[1]) {
                s1.push(node.children[1]);
            }
        }
        while (s2.length !== 0) {
            show(s2.pop());
        }
    }
}
